<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="174"><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.57%)</title><rect x="0.0000%" y="437" width="0.5747%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>lli`core::ptr::drop_in_place (3 samples, 1.72%)</title><rect x="0.5747%" y="325" width="1.7241%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="3"/><text x="0.8247%" y="335.50"></text></g><g><title>lli`core::ptr::drop_in_place (2 samples, 1.15%)</title><rect x="1.1494%" y="309" width="1.1494%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="1.3994%" y="319.50"></text></g><g><title>lli`core::ptr::drop_in_place (2 samples, 1.15%)</title><rect x="1.1494%" y="293" width="1.1494%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="1.3994%" y="303.50"></text></g><g><title>lli`core::ptr::drop_in_place (2 samples, 1.15%)</title><rect x="1.1494%" y="277" width="1.1494%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="1.3994%" y="287.50"></text></g><g><title>lli`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.15%)</title><rect x="1.1494%" y="261" width="1.1494%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="2"/><text x="1.3994%" y="271.50"></text></g><g><title>lli`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 1.15%)</title><rect x="1.1494%" y="245" width="1.1494%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="2"/><text x="1.3994%" y="255.50"></text></g><g><title>lli`alloc::alloc::dealloc (2 samples, 1.15%)</title><rect x="1.1494%" y="229" width="1.1494%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="2"/><text x="1.3994%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 1.15%)</title><rect x="1.1494%" y="213" width="1.1494%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="2"/><text x="1.3994%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 1.15%)</title><rect x="1.1494%" y="197" width="1.1494%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="2"/><text x="1.3994%" y="207.50"></text></g><g><title>lli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.57%)</title><rect x="2.2989%" y="309" width="0.5747%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="2.5489%" y="319.50"></text></g><g><title>lli`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.57%)</title><rect x="3.4483%" y="261" width="0.5747%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="1"/><text x="3.6983%" y="271.50"></text></g><g><title>lli`alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 2.30%)</title><rect x="3.4483%" y="277" width="2.2989%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="4"/><text x="3.6983%" y="287.50">l..</text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 1.72%)</title><rect x="4.0230%" y="261" width="1.7241%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="3"/><text x="4.2730%" y="271.50"></text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 1.15%)</title><rect x="4.5977%" y="245" width="1.1494%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="2"/><text x="4.8477%" y="255.50"></text></g><g><title>lli`core::ptr::slice_from_raw_parts (1 samples, 0.57%)</title><rect x="5.7471%" y="277" width="0.5747%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="1"/><text x="5.9971%" y="287.50"></text></g><g><title>lli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 3.45%)</title><rect x="3.4483%" y="293" width="3.4483%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="6"/><text x="3.6983%" y="303.50">lli..</text></g><g><title>lli`core::slice::raw::from_raw_parts (1 samples, 0.57%)</title><rect x="6.3218%" y="277" width="0.5747%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="1"/><text x="6.5718%" y="287.50"></text></g><g><title>lli`core::ptr::slice_from_raw_parts (1 samples, 0.57%)</title><rect x="6.3218%" y="261" width="0.5747%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="1"/><text x="6.5718%" y="271.50"></text></g><g><title>lli`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 1.72%)</title><rect x="7.4713%" y="261" width="1.7241%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="3"/><text x="7.7213%" y="271.50"></text></g><g><title>lli`core::ptr::const_ptr::_&lt;impl *const T&gt;::add (1 samples, 0.57%)</title><rect x="8.6207%" y="245" width="0.5747%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="1"/><text x="8.8707%" y="255.50"></text></g><g><title>lli`core::ptr::const_ptr::_&lt;impl *const T&gt;::offset (1 samples, 0.57%)</title><rect x="8.6207%" y="229" width="0.5747%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="1"/><text x="8.8707%" y="239.50"></text></g><g><title>lli`lli::mem::Mem::mem_at (13 samples, 7.47%)</title><rect x="2.2989%" y="325" width="7.4713%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="13"/><text x="2.5489%" y="335.50">lli`lli::m..</text></g><g><title>lli`lli::mem::Mem::pmem_at (12 samples, 6.90%)</title><rect x="2.8736%" y="309" width="6.8966%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="12"/><text x="3.1236%" y="319.50">lli`lli::..</text></g><g><title>lli`core::slice::_&lt;impl [T]&gt;::get (5 samples, 2.87%)</title><rect x="6.8966%" y="293" width="2.8736%" height="15" fill="rgb(241,131,45)" fg:x="12" fg:w="5"/><text x="7.1466%" y="303.50">ll..</text></g><g><title>lli`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (5 samples, 2.87%)</title><rect x="6.8966%" y="277" width="2.8736%" height="15" fill="rgb(249,31,29)" fg:x="12" fg:w="5"/><text x="7.1466%" y="287.50">ll..</text></g><g><title>lli`core::slice::_&lt;impl [T]&gt;::len (1 samples, 0.57%)</title><rect x="9.1954%" y="261" width="0.5747%" height="15" fill="rgb(225,111,53)" fg:x="16" fg:w="1"/><text x="9.4454%" y="271.50"></text></g><g><title>lli`&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1 samples, 0.57%)</title><rect x="10.3448%" y="309" width="0.5747%" height="15" fill="rgb(238,160,17)" fg:x="18" fg:w="1"/><text x="10.5948%" y="319.50"></text></g><g><title>lli`&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.57%)</title><rect x="10.3448%" y="293" width="0.5747%" height="15" fill="rgb(214,148,48)" fg:x="18" fg:w="1"/><text x="10.5948%" y="303.50"></text></g><g><title>lli`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.57%)</title><rect x="10.3448%" y="277" width="0.5747%" height="15" fill="rgb(232,36,49)" fg:x="18" fg:w="1"/><text x="10.5948%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.57%)</title><rect x="10.3448%" y="261" width="0.5747%" height="15" fill="rgb(209,103,24)" fg:x="18" fg:w="1"/><text x="10.5948%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="10.3448%" y="245" width="0.5747%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="1"/><text x="10.5948%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.57%)</title><rect x="10.3448%" y="229" width="0.5747%" height="15" fill="rgb(213,181,19)" fg:x="18" fg:w="1"/><text x="10.5948%" y="239.50"></text></g><g><title>lli`core::ptr::drop_in_place (1 samples, 0.57%)</title><rect x="10.9195%" y="261" width="0.5747%" height="15" fill="rgb(254,191,54)" fg:x="19" fg:w="1"/><text x="11.1695%" y="271.50"></text></g><g><title>lli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.57%)</title><rect x="11.4943%" y="213" width="0.5747%" height="15" fill="rgb(241,83,37)" fg:x="20" fg:w="1"/><text x="11.7443%" y="223.50"></text></g><g><title>lli`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.57%)</title><rect x="11.4943%" y="197" width="0.5747%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="1"/><text x="11.7443%" y="207.50"></text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.57%)</title><rect x="11.4943%" y="181" width="0.5747%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="1"/><text x="11.7443%" y="191.50"></text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.57%)</title><rect x="11.4943%" y="165" width="0.5747%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="1"/><text x="11.7443%" y="175.50"></text></g><g><title>lli`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.57%)</title><rect x="12.0690%" y="213" width="0.5747%" height="15" fill="rgb(238,167,29)" fg:x="21" fg:w="1"/><text x="12.3190%" y="223.50"></text></g><g><title>lli`core::ptr::drop_in_place (3 samples, 1.72%)</title><rect x="11.4943%" y="245" width="1.7241%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="3"/><text x="11.7443%" y="255.50"></text></g><g><title>lli`core::ptr::drop_in_place (3 samples, 1.72%)</title><rect x="11.4943%" y="229" width="1.7241%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="3"/><text x="11.7443%" y="239.50"></text></g><g><title>lli`core::ptr::drop_in_place (1 samples, 0.57%)</title><rect x="12.6437%" y="213" width="0.5747%" height="15" fill="rgb(208,69,12)" fg:x="22" fg:w="1"/><text x="12.8937%" y="223.50"></text></g><g><title>lli`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.57%)</title><rect x="12.6437%" y="197" width="0.5747%" height="15" fill="rgb(235,93,37)" fg:x="22" fg:w="1"/><text x="12.8937%" y="207.50"></text></g><g><title>lli`core::ptr::unique::Unique&lt;T&gt;::cast (1 samples, 0.57%)</title><rect x="12.6437%" y="181" width="0.5747%" height="15" fill="rgb(213,116,39)" fg:x="22" fg:w="1"/><text x="12.8937%" y="191.50"></text></g><g><title>lli`hashbrown::map::HashMap&lt;K,V,S&gt;::insert::_{{closure}} (1 samples, 0.57%)</title><rect x="13.2184%" y="245" width="0.5747%" height="15" fill="rgb(222,207,29)" fg:x="23" fg:w="1"/><text x="13.4684%" y="255.50"></text></g><g><title>lli`core::intrinsics::copy_nonoverlapping (1 samples, 0.57%)</title><rect x="13.7931%" y="181" width="0.5747%" height="15" fill="rgb(206,96,30)" fg:x="24" fg:w="1"/><text x="14.0431%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="13.7931%" y="165" width="0.5747%" height="15" fill="rgb(218,138,4)" fg:x="24" fg:w="1"/><text x="14.0431%" y="175.50"></text></g><g><title>lli`core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.57%)</title><rect x="14.3678%" y="181" width="0.5747%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="1"/><text x="14.6178%" y="191.50"></text></g><g><title>lli`hashbrown::map::make_hash (4 samples, 2.30%)</title><rect x="13.7931%" y="245" width="2.2989%" height="15" fill="rgb(239,60,40)" fg:x="24" fg:w="4"/><text x="14.0431%" y="255.50">l..</text></g><g><title>lli`&lt;alloc::string::String as core::hash::Hash&gt;::hash (4 samples, 2.30%)</title><rect x="13.7931%" y="229" width="2.2989%" height="15" fill="rgb(206,27,48)" fg:x="24" fg:w="4"/><text x="14.0431%" y="239.50">l..</text></g><g><title>lli`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 2.30%)</title><rect x="13.7931%" y="213" width="2.2989%" height="15" fill="rgb(225,35,8)" fg:x="24" fg:w="4"/><text x="14.0431%" y="223.50">l..</text></g><g><title>lli`&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (4 samples, 2.30%)</title><rect x="13.7931%" y="197" width="2.2989%" height="15" fill="rgb(250,213,24)" fg:x="24" fg:w="4"/><text x="14.0431%" y="207.50">l..</text></g><g><title>lli`core::slice::_&lt;impl [T]&gt;::split_at (2 samples, 1.15%)</title><rect x="14.9425%" y="181" width="1.1494%" height="15" fill="rgb(247,123,22)" fg:x="26" fg:w="2"/><text x="15.1925%" y="191.50"></text></g><g><title>lli`core::slice::_&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.57%)</title><rect x="15.5172%" y="165" width="0.5747%" height="15" fill="rgb(231,138,38)" fg:x="27" fg:w="1"/><text x="15.7672%" y="175.50"></text></g><g><title>lli`core::slice::_&lt;impl [T]&gt;::get_unchecked (1 samples, 0.57%)</title><rect x="15.5172%" y="149" width="0.5747%" height="15" fill="rgb(231,145,46)" fg:x="27" fg:w="1"/><text x="15.7672%" y="159.50"></text></g><g><title>lli`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.57%)</title><rect x="15.5172%" y="133" width="0.5747%" height="15" fill="rgb(251,118,11)" fg:x="27" fg:w="1"/><text x="15.7672%" y="143.50"></text></g><g><title>lli`hashbrown::raw::Bucket&lt;T&gt;::as_mut (1 samples, 0.57%)</title><rect x="16.0920%" y="245" width="0.5747%" height="15" fill="rgb(217,147,25)" fg:x="28" fg:w="1"/><text x="16.3420%" y="255.50"></text></g><g><title>lli`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.57%)</title><rect x="16.0920%" y="229" width="0.5747%" height="15" fill="rgb(247,81,37)" fg:x="28" fg:w="1"/><text x="16.3420%" y="239.50"></text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (1 samples, 0.57%)</title><rect x="16.0920%" y="213" width="0.5747%" height="15" fill="rgb(209,12,38)" fg:x="28" fg:w="1"/><text x="16.3420%" y="223.50"></text></g><g><title>lli`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 1.15%)</title><rect x="16.6667%" y="229" width="1.1494%" height="15" fill="rgb(227,1,9)" fg:x="29" fg:w="2"/><text x="16.9167%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 1.15%)</title><rect x="16.6667%" y="213" width="1.1494%" height="15" fill="rgb(248,47,43)" fg:x="29" fg:w="2"/><text x="16.9167%" y="223.50"></text></g><g><title>lli`&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="17.8161%" y="229" width="0.5747%" height="15" fill="rgb(221,10,30)" fg:x="31" fg:w="1"/><text x="18.0661%" y="239.50"></text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::bucket (1 samples, 0.57%)</title><rect x="17.8161%" y="213" width="0.5747%" height="15" fill="rgb(210,229,1)" fg:x="31" fg:w="1"/><text x="18.0661%" y="223.50"></text></g><g><title>lli`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.57%)</title><rect x="17.8161%" y="197" width="0.5747%" height="15" fill="rgb(222,148,37)" fg:x="31" fg:w="1"/><text x="18.0661%" y="207.50"></text></g><g><title>lli`hashbrown::map::HashMap&lt;K,V,S&gt;::insert::_{{closure}} (1 samples, 0.57%)</title><rect x="18.3908%" y="229" width="0.5747%" height="15" fill="rgb(234,67,33)" fg:x="32" fg:w="1"/><text x="18.6408%" y="239.50"></text></g><g><title>lli`&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.57%)</title><rect x="18.3908%" y="213" width="0.5747%" height="15" fill="rgb(247,98,35)" fg:x="32" fg:w="1"/><text x="18.6408%" y="223.50"></text></g><g><title>lli`core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.57%)</title><rect x="18.3908%" y="197" width="0.5747%" height="15" fill="rgb(247,138,52)" fg:x="32" fg:w="1"/><text x="18.6408%" y="207.50"></text></g><g><title>lli`core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.57%)</title><rect x="18.3908%" y="181" width="0.5747%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="1"/><text x="18.6408%" y="191.50"></text></g><g><title>lli`core::slice::cmp::_&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.57%)</title><rect x="18.3908%" y="165" width="0.5747%" height="15" fill="rgb(246,177,23)" fg:x="32" fg:w="1"/><text x="18.6408%" y="175.50"></text></g><g><title>lli`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.57%)</title><rect x="18.3908%" y="149" width="0.5747%" height="15" fill="rgb(230,62,27)" fg:x="32" fg:w="1"/><text x="18.6408%" y="159.50"></text></g><g><title>lli`core::mem::size_of_val (1 samples, 0.57%)</title><rect x="18.3908%" y="133" width="0.5747%" height="15" fill="rgb(216,154,8)" fg:x="32" fg:w="1"/><text x="18.6408%" y="143.50"></text></g><g><title>lli`core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.57%)</title><rect x="18.9655%" y="197" width="0.5747%" height="15" fill="rgb(244,35,45)" fg:x="33" fg:w="1"/><text x="19.2155%" y="207.50"></text></g><g><title>lli`hashbrown::raw::sse2::Group::load (2 samples, 1.15%)</title><rect x="19.5402%" y="197" width="1.1494%" height="15" fill="rgb(251,115,12)" fg:x="34" fg:w="2"/><text x="19.7902%" y="207.50"></text></g><g><title>lli`core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.57%)</title><rect x="20.1149%" y="181" width="0.5747%" height="15" fill="rgb(240,54,50)" fg:x="35" fg:w="1"/><text x="20.3649%" y="191.50"></text></g><g><title>lli`lli::op::Signal::respond (20 samples, 11.49%)</title><rect x="9.7701%" y="325" width="11.4943%" height="15" fill="rgb(233,84,52)" fg:x="17" fg:w="20"/><text x="10.0201%" y="335.50">lli`lli::op::Sign..</text></g><g><title>lli`lli::mem::Mem::label_add (18 samples, 10.34%)</title><rect x="10.9195%" y="309" width="10.3448%" height="15" fill="rgb(207,117,47)" fg:x="19" fg:w="18"/><text x="11.1695%" y="319.50">lli`lli::mem::M..</text></g><g><title>lli`ahash::hash_map::AHashMap&lt;K,V,S&gt;::insert (18 samples, 10.34%)</title><rect x="10.9195%" y="293" width="10.3448%" height="15" fill="rgb(249,43,39)" fg:x="19" fg:w="18"/><text x="11.1695%" y="303.50">lli`ahash::hash..</text></g><g><title>lli`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (18 samples, 10.34%)</title><rect x="10.9195%" y="277" width="10.3448%" height="15" fill="rgb(209,38,44)" fg:x="19" fg:w="18"/><text x="11.1695%" y="287.50">lli`std::collec..</text></g><g><title>lli`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (17 samples, 9.77%)</title><rect x="11.4943%" y="261" width="9.7701%" height="15" fill="rgb(236,212,23)" fg:x="20" fg:w="17"/><text x="11.7443%" y="271.50">lli`hashbrown:..</text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::find (8 samples, 4.60%)</title><rect x="16.6667%" y="245" width="4.5977%" height="15" fill="rgb(242,79,21)" fg:x="29" fg:w="8"/><text x="16.9167%" y="255.50">lli`h..</text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::iter_hash (4 samples, 2.30%)</title><rect x="18.9655%" y="229" width="2.2989%" height="15" fill="rgb(211,96,35)" fg:x="33" fg:w="4"/><text x="19.2155%" y="239.50">l..</text></g><g><title>lli`hashbrown::raw::RawIterHash&lt;T&gt;::new (4 samples, 2.30%)</title><rect x="18.9655%" y="213" width="2.2989%" height="15" fill="rgb(253,215,40)" fg:x="33" fg:w="4"/><text x="19.2155%" y="223.50">l..</text></g><g><title>lli`hashbrown::raw::sse2::Group::match_byte (1 samples, 0.57%)</title><rect x="20.6897%" y="197" width="0.5747%" height="15" fill="rgb(211,81,21)" fg:x="36" fg:w="1"/><text x="20.9397%" y="207.50"></text></g><g><title>lli`core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.57%)</title><rect x="20.6897%" y="181" width="0.5747%" height="15" fill="rgb(208,190,38)" fg:x="36" fg:w="1"/><text x="20.9397%" y="191.50"></text></g><g><title>lli`core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.57%)</title><rect x="20.6897%" y="165" width="0.5747%" height="15" fill="rgb(235,213,38)" fg:x="36" fg:w="1"/><text x="20.9397%" y="175.50"></text></g><g><title>lli`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1 samples, 0.57%)</title><rect x="21.2644%" y="309" width="0.5747%" height="15" fill="rgb(237,122,38)" fg:x="37" fg:w="1"/><text x="21.5144%" y="319.50"></text></g><g><title>lli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.57%)</title><rect x="21.2644%" y="293" width="0.5747%" height="15" fill="rgb(244,218,35)" fg:x="37" fg:w="1"/><text x="21.5144%" y="303.50"></text></g><g><title>lli`core::ptr::slice_from_raw_parts (1 samples, 0.57%)</title><rect x="21.2644%" y="277" width="0.5747%" height="15" fill="rgb(240,68,47)" fg:x="37" fg:w="1"/><text x="21.5144%" y="287.50"></text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.57%)</title><rect x="22.4138%" y="261" width="0.5747%" height="15" fill="rgb(210,16,53)" fg:x="39" fg:w="1"/><text x="22.6638%" y="271.50"></text></g><g><title>lli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 1.72%)</title><rect x="21.8391%" y="293" width="1.7241%" height="15" fill="rgb(235,124,12)" fg:x="38" fg:w="3"/><text x="22.0891%" y="303.50"></text></g><g><title>lli`alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 1.15%)</title><rect x="22.4138%" y="277" width="1.1494%" height="15" fill="rgb(224,169,11)" fg:x="39" fg:w="2"/><text x="22.6638%" y="287.50"></text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.57%)</title><rect x="22.9885%" y="261" width="0.5747%" height="15" fill="rgb(250,166,2)" fg:x="40" fg:w="1"/><text x="23.2385%" y="271.50"></text></g><g><title>lli`alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.57%)</title><rect x="23.5632%" y="293" width="0.5747%" height="15" fill="rgb(242,216,29)" fg:x="41" fg:w="1"/><text x="23.8132%" y="303.50"></text></g><g><title>lli`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.57%)</title><rect x="24.1379%" y="261" width="0.5747%" height="15" fill="rgb(230,116,27)" fg:x="42" fg:w="1"/><text x="24.3879%" y="271.50"></text></g><g><title>lli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 3.45%)</title><rect x="21.8391%" y="309" width="3.4483%" height="15" fill="rgb(228,99,48)" fg:x="38" fg:w="6"/><text x="22.0891%" y="319.50">lli..</text></g><g><title>lli`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 1.15%)</title><rect x="24.1379%" y="293" width="1.1494%" height="15" fill="rgb(253,11,6)" fg:x="42" fg:w="2"/><text x="24.3879%" y="303.50"></text></g><g><title>lli`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 1.15%)</title><rect x="24.1379%" y="277" width="1.1494%" height="15" fill="rgb(247,143,39)" fg:x="42" fg:w="2"/><text x="24.3879%" y="287.50"></text></g><g><title>lli`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.57%)</title><rect x="24.7126%" y="261" width="0.5747%" height="15" fill="rgb(236,97,10)" fg:x="43" fg:w="1"/><text x="24.9626%" y="271.50"></text></g><g><title>lli`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.57%)</title><rect x="24.7126%" y="245" width="0.5747%" height="15" fill="rgb(233,208,19)" fg:x="43" fg:w="1"/><text x="24.9626%" y="255.50"></text></g><g><title>lli`core::ptr::const_ptr::_&lt;impl *const T&gt;::offset (1 samples, 0.57%)</title><rect x="24.7126%" y="229" width="0.5747%" height="15" fill="rgb(216,164,2)" fg:x="43" fg:w="1"/><text x="24.9626%" y="239.50"></text></g><g><title>lli`core::cell::UnsafeCell&lt;T&gt;::get (1 samples, 0.57%)</title><rect x="25.8621%" y="293" width="0.5747%" height="15" fill="rgb(220,129,5)" fg:x="45" fg:w="1"/><text x="26.1121%" y="303.50"></text></g><g><title>lli`&lt;lli::op::OP_TABLE as core::ops::deref::Deref&gt;::deref (3 samples, 1.72%)</title><rect x="25.2874%" y="309" width="1.7241%" height="15" fill="rgb(242,17,10)" fg:x="44" fg:w="3"/><text x="25.5374%" y="319.50"></text></g><g><title>lli`std::sync::once::Once::call_once (1 samples, 0.57%)</title><rect x="26.4368%" y="293" width="0.5747%" height="15" fill="rgb(242,107,0)" fg:x="46" fg:w="1"/><text x="26.6868%" y="303.50"></text></g><g><title>lli`std::sync::once::Once::call_inner (1 samples, 0.57%)</title><rect x="26.4368%" y="277" width="0.5747%" height="15" fill="rgb(251,28,31)" fg:x="46" fg:w="1"/><text x="26.6868%" y="287.50"></text></g><g><title>lli`std::sync::once::Once::call_once::_{{closure}} (1 samples, 0.57%)</title><rect x="26.4368%" y="261" width="0.5747%" height="15" fill="rgb(233,223,10)" fg:x="46" fg:w="1"/><text x="26.6868%" y="271.50"></text></g><g><title>lli`lazy_static::lazy::Lazy&lt;T&gt;::get::_{{closure}} (1 samples, 0.57%)</title><rect x="26.4368%" y="245" width="0.5747%" height="15" fill="rgb(215,21,27)" fg:x="46" fg:w="1"/><text x="26.6868%" y="255.50"></text></g><g><title>lli`core::ops::function::FnOnce::call_once (1 samples, 0.57%)</title><rect x="26.4368%" y="229" width="0.5747%" height="15" fill="rgb(232,23,21)" fg:x="46" fg:w="1"/><text x="26.6868%" y="239.50"></text></g><g><title>lli`ahash::hash_map::AHashMap&lt;K,V,S&gt;::insert (1 samples, 0.57%)</title><rect x="26.4368%" y="213" width="0.5747%" height="15" fill="rgb(244,5,23)" fg:x="46" fg:w="1"/><text x="26.6868%" y="223.50"></text></g><g><title>lli`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.57%)</title><rect x="26.4368%" y="197" width="0.5747%" height="15" fill="rgb(226,81,46)" fg:x="46" fg:w="1"/><text x="26.6868%" y="207.50"></text></g><g><title>lli`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.57%)</title><rect x="26.4368%" y="181" width="0.5747%" height="15" fill="rgb(247,70,30)" fg:x="46" fg:w="1"/><text x="26.6868%" y="191.50"></text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.57%)</title><rect x="26.4368%" y="165" width="0.5747%" height="15" fill="rgb(212,68,19)" fg:x="46" fg:w="1"/><text x="26.6868%" y="175.50"></text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::reserve (1 samples, 0.57%)</title><rect x="26.4368%" y="149" width="0.5747%" height="15" fill="rgb(240,187,13)" fg:x="46" fg:w="1"/><text x="26.6868%" y="159.50"></text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.57%)</title><rect x="26.4368%" y="133" width="0.5747%" height="15" fill="rgb(223,113,26)" fg:x="46" fg:w="1"/><text x="26.6868%" y="143.50"></text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::resize (1 samples, 0.57%)</title><rect x="26.4368%" y="117" width="0.5747%" height="15" fill="rgb(206,192,2)" fg:x="46" fg:w="1"/><text x="26.6868%" y="127.50"></text></g><g><title>lli`hashbrown::map::HashMap&lt;K,V,S&gt;::insert::_{{closure}} (1 samples, 0.57%)</title><rect x="26.4368%" y="101" width="0.5747%" height="15" fill="rgb(241,108,4)" fg:x="46" fg:w="1"/><text x="26.6868%" y="111.50"></text></g><g><title>lli`hashbrown::map::make_hash (1 samples, 0.57%)</title><rect x="26.4368%" y="85" width="0.5747%" height="15" fill="rgb(247,173,49)" fg:x="46" fg:w="1"/><text x="26.6868%" y="95.50"></text></g><g><title>lli`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.57%)</title><rect x="26.4368%" y="69" width="0.5747%" height="15" fill="rgb(224,114,35)" fg:x="46" fg:w="1"/><text x="26.6868%" y="79.50"></text></g><g><title>lli`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.57%)</title><rect x="26.4368%" y="53" width="0.5747%" height="15" fill="rgb(245,159,27)" fg:x="46" fg:w="1"/><text x="26.6868%" y="63.50"></text></g><g><title>lli`&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.57%)</title><rect x="26.4368%" y="37" width="0.5747%" height="15" fill="rgb(245,172,44)" fg:x="46" fg:w="1"/><text x="26.6868%" y="47.50"></text></g><g><title>lli`core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (3 samples, 1.72%)</title><rect x="31.0345%" y="197" width="1.7241%" height="15" fill="rgb(236,23,11)" fg:x="54" fg:w="3"/><text x="31.2845%" y="207.50"></text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::write_bytes (2 samples, 1.15%)</title><rect x="31.6092%" y="181" width="1.1494%" height="15" fill="rgb(205,117,38)" fg:x="55" fg:w="2"/><text x="31.8592%" y="191.50"></text></g><g><title>lli`core::intrinsics::write_bytes (2 samples, 1.15%)</title><rect x="31.6092%" y="165" width="1.1494%" height="15" fill="rgb(237,72,25)" fg:x="55" fg:w="2"/><text x="31.8592%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="32.1839%" y="149" width="0.5747%" height="15" fill="rgb(244,70,9)" fg:x="56" fg:w="1"/><text x="32.4339%" y="159.50"></text></g><g><title>lli`core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.57%)</title><rect x="32.7586%" y="197" width="0.5747%" height="15" fill="rgb(217,125,39)" fg:x="57" fg:w="1"/><text x="33.0086%" y="207.50"></text></g><g><title>lli`hashbrown::map::make_hash (10 samples, 5.75%)</title><rect x="28.1609%" y="245" width="5.7471%" height="15" fill="rgb(235,36,10)" fg:x="49" fg:w="10"/><text x="28.4109%" y="255.50">lli`has..</text></g><g><title>lli`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (10 samples, 5.75%)</title><rect x="28.1609%" y="229" width="5.7471%" height="15" fill="rgb(251,123,47)" fg:x="49" fg:w="10"/><text x="28.4109%" y="239.50">lli`cor..</text></g><g><title>lli`&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (10 samples, 5.75%)</title><rect x="28.1609%" y="213" width="5.7471%" height="15" fill="rgb(221,13,13)" fg:x="49" fg:w="10"/><text x="28.4109%" y="223.50">lli`&lt;ah..</text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::write_bytes (1 samples, 0.57%)</title><rect x="33.3333%" y="197" width="0.5747%" height="15" fill="rgb(238,131,9)" fg:x="58" fg:w="1"/><text x="33.5833%" y="207.50"></text></g><g><title>lli`&lt;&amp;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (1 samples, 0.57%)</title><rect x="33.9080%" y="229" width="0.5747%" height="15" fill="rgb(211,50,8)" fg:x="59" fg:w="1"/><text x="34.1580%" y="239.50"></text></g><g><title>lli`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 1.15%)</title><rect x="34.4828%" y="229" width="1.1494%" height="15" fill="rgb(245,182,24)" fg:x="60" fg:w="2"/><text x="34.7328%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 1.15%)</title><rect x="34.4828%" y="213" width="1.1494%" height="15" fill="rgb(242,14,37)" fg:x="60" fg:w="2"/><text x="34.7328%" y="223.50"></text></g><g><title>lli`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.15%)</title><rect x="36.7816%" y="213" width="1.1494%" height="15" fill="rgb(246,228,12)" fg:x="64" fg:w="2"/><text x="37.0316%" y="223.50"></text></g><g><title>lli`hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.57%)</title><rect x="37.3563%" y="197" width="0.5747%" height="15" fill="rgb(213,55,15)" fg:x="65" fg:w="1"/><text x="37.6063%" y="207.50"></text></g><g><title>lli`&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 2.87%)</title><rect x="35.6322%" y="229" width="2.8736%" height="15" fill="rgb(209,9,3)" fg:x="62" fg:w="5"/><text x="35.8822%" y="239.50">ll..</text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::bucket (1 samples, 0.57%)</title><rect x="37.9310%" y="213" width="0.5747%" height="15" fill="rgb(230,59,30)" fg:x="66" fg:w="1"/><text x="38.1810%" y="223.50"></text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::data_end (1 samples, 0.57%)</title><rect x="37.9310%" y="197" width="0.5747%" height="15" fill="rgb(209,121,21)" fg:x="66" fg:w="1"/><text x="38.1810%" y="207.50"></text></g><g><title>lli`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.57%)</title><rect x="37.9310%" y="181" width="0.5747%" height="15" fill="rgb(220,109,13)" fg:x="66" fg:w="1"/><text x="38.1810%" y="191.50"></text></g><g><title>lli`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.57%)</title><rect x="38.5057%" y="165" width="0.5747%" height="15" fill="rgb(232,18,1)" fg:x="67" fg:w="1"/><text x="38.7557%" y="175.50"></text></g><g><title>lli`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::_{{closure}} (2 samples, 1.15%)</title><rect x="38.5057%" y="229" width="1.1494%" height="15" fill="rgb(215,41,42)" fg:x="67" fg:w="2"/><text x="38.7557%" y="239.50"></text></g><g><title>lli`core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 1.15%)</title><rect x="38.5057%" y="213" width="1.1494%" height="15" fill="rgb(224,123,36)" fg:x="67" fg:w="2"/><text x="38.7557%" y="223.50"></text></g><g><title>lli`core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 1.15%)</title><rect x="38.5057%" y="197" width="1.1494%" height="15" fill="rgb(240,125,3)" fg:x="67" fg:w="2"/><text x="38.7557%" y="207.50"></text></g><g><title>lli`core::slice::cmp::_&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 1.15%)</title><rect x="38.5057%" y="181" width="1.1494%" height="15" fill="rgb(205,98,50)" fg:x="67" fg:w="2"/><text x="38.7557%" y="191.50"></text></g><g><title>lli`core::mem::size_of_val (1 samples, 0.57%)</title><rect x="39.0805%" y="165" width="0.5747%" height="15" fill="rgb(205,185,37)" fg:x="68" fg:w="1"/><text x="39.3305%" y="175.50"></text></g><g><title>lli`hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.57%)</title><rect x="39.6552%" y="229" width="0.5747%" height="15" fill="rgb(238,207,15)" fg:x="69" fg:w="1"/><text x="39.9052%" y="239.50"></text></g><g><title>lli`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.57%)</title><rect x="39.6552%" y="213" width="0.5747%" height="15" fill="rgb(213,199,42)" fg:x="69" fg:w="1"/><text x="39.9052%" y="223.50"></text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (1 samples, 0.57%)</title><rect x="39.6552%" y="197" width="0.5747%" height="15" fill="rgb(235,201,11)" fg:x="69" fg:w="1"/><text x="39.9052%" y="207.50"></text></g><g><title>lli`core::num::_&lt;impl isize&gt;::wrapping_neg (1 samples, 0.57%)</title><rect x="39.6552%" y="181" width="0.5747%" height="15" fill="rgb(207,46,11)" fg:x="69" fg:w="1"/><text x="39.9052%" y="191.50"></text></g><g><title>lli`core::num::_&lt;impl isize&gt;::overflowing_neg (1 samples, 0.57%)</title><rect x="39.6552%" y="165" width="0.5747%" height="15" fill="rgb(241,35,35)" fg:x="69" fg:w="1"/><text x="39.9052%" y="175.50"></text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::ctrl (1 samples, 0.57%)</title><rect x="40.2299%" y="197" width="0.5747%" height="15" fill="rgb(243,32,47)" fg:x="70" fg:w="1"/><text x="40.4799%" y="207.50"></text></g><g><title>lli`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.57%)</title><rect x="40.2299%" y="181" width="0.5747%" height="15" fill="rgb(247,202,23)" fg:x="70" fg:w="1"/><text x="40.4799%" y="191.50"></text></g><g><title>lli`core::cmp::Ord::min (1 samples, 0.57%)</title><rect x="40.8046%" y="181" width="0.5747%" height="15" fill="rgb(219,102,11)" fg:x="71" fg:w="1"/><text x="41.0546%" y="191.50"></text></g><g><title>lli`core::cmp::min_by (1 samples, 0.57%)</title><rect x="40.8046%" y="165" width="0.5747%" height="15" fill="rgb(243,110,44)" fg:x="71" fg:w="1"/><text x="41.0546%" y="175.50"></text></g><g><title>lli`hashbrown::raw::h2 (2 samples, 1.15%)</title><rect x="40.8046%" y="197" width="1.1494%" height="15" fill="rgb(222,74,54)" fg:x="71" fg:w="2"/><text x="41.0546%" y="207.50"></text></g><g><title>lli`core::cmp::min_by (1 samples, 0.57%)</title><rect x="41.3793%" y="181" width="0.5747%" height="15" fill="rgb(216,99,12)" fg:x="72" fg:w="1"/><text x="41.6293%" y="191.50"></text></g><g><title>lli`&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (1 samples, 0.57%)</title><rect x="42.5287%" y="165" width="0.5747%" height="15" fill="rgb(226,22,26)" fg:x="74" fg:w="1"/><text x="42.7787%" y="175.50"></text></g><g><title>lli`core::core_arch::x86::sse2::_mm_cmpeq_epi8 (2 samples, 1.15%)</title><rect x="42.5287%" y="181" width="1.1494%" height="15" fill="rgb(217,163,10)" fg:x="74" fg:w="2"/><text x="42.7787%" y="191.50"></text></g><g><title>lli`core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.57%)</title><rect x="43.1034%" y="165" width="0.5747%" height="15" fill="rgb(213,25,53)" fg:x="75" fg:w="1"/><text x="43.3534%" y="175.50"></text></g><g><title>lli`&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (1 samples, 0.57%)</title><rect x="43.1034%" y="149" width="0.5747%" height="15" fill="rgb(252,105,26)" fg:x="75" fg:w="1"/><text x="43.3534%" y="159.50"></text></g><g><title>lli`core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.57%)</title><rect x="43.6782%" y="181" width="0.5747%" height="15" fill="rgb(220,39,43)" fg:x="76" fg:w="1"/><text x="43.9282%" y="191.50"></text></g><g><title>lli`hashbrown::raw::RawIterHash&lt;T&gt;::new (8 samples, 4.60%)</title><rect x="40.2299%" y="213" width="4.5977%" height="15" fill="rgb(229,68,48)" fg:x="70" fg:w="8"/><text x="40.4799%" y="223.50">lli`h..</text></g><g><title>lli`hashbrown::raw::sse2::Group::match_byte (5 samples, 2.87%)</title><rect x="41.9540%" y="197" width="2.8736%" height="15" fill="rgb(252,8,32)" fg:x="73" fg:w="5"/><text x="42.2040%" y="207.50">ll..</text></g><g><title>lli`core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.57%)</title><rect x="44.2529%" y="181" width="0.5747%" height="15" fill="rgb(223,20,43)" fg:x="77" fg:w="1"/><text x="44.5029%" y="191.50"></text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::find (20 samples, 11.49%)</title><rect x="33.9080%" y="245" width="11.4943%" height="15" fill="rgb(229,81,49)" fg:x="59" fg:w="20"/><text x="34.1580%" y="255.50">lli`hashbrown::ra..</text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::iter_hash (9 samples, 5.17%)</title><rect x="40.2299%" y="229" width="5.1724%" height="15" fill="rgb(236,28,36)" fg:x="70" fg:w="9"/><text x="40.4799%" y="239.50">lli`ha..</text></g><g><title>lli`hashbrown::raw::sse2::Group::load (1 samples, 0.57%)</title><rect x="44.8276%" y="213" width="0.5747%" height="15" fill="rgb(249,185,26)" fg:x="78" fg:w="1"/><text x="45.0776%" y="223.50"></text></g><g><title>lli`ahash::hash_map::AHashMap&lt;K,V,S&gt;::get (33 samples, 18.97%)</title><rect x="27.0115%" y="309" width="18.9655%" height="15" fill="rgb(249,174,33)" fg:x="47" fg:w="33"/><text x="27.2615%" y="319.50">lli`ahash::hash_map::AHashMap&lt;..</text></g><g><title>lli`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (33 samples, 18.97%)</title><rect x="27.0115%" y="293" width="18.9655%" height="15" fill="rgb(233,201,37)" fg:x="47" fg:w="33"/><text x="27.2615%" y="303.50">lli`std::collections::hash::ma..</text></g><g><title>lli`hashbrown::map::HashMap&lt;K,V,S&gt;::get (33 samples, 18.97%)</title><rect x="27.0115%" y="277" width="18.9655%" height="15" fill="rgb(221,78,26)" fg:x="47" fg:w="33"/><text x="27.2615%" y="287.50">lli`hashbrown::map::HashMap&lt;K,..</text></g><g><title>lli`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (33 samples, 18.97%)</title><rect x="27.0115%" y="261" width="18.9655%" height="15" fill="rgb(250,127,30)" fg:x="47" fg:w="33"/><text x="27.2615%" y="271.50">lli`hashbrown::map::HashMap&lt;K,..</text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::iter_hash (1 samples, 0.57%)</title><rect x="45.4023%" y="245" width="0.5747%" height="15" fill="rgb(230,49,44)" fg:x="79" fg:w="1"/><text x="45.6523%" y="255.50"></text></g><g><title>lli`lli::code::Code::at (1 samples, 0.57%)</title><rect x="45.9770%" y="309" width="0.5747%" height="15" fill="rgb(229,67,23)" fg:x="80" fg:w="1"/><text x="46.2270%" y="319.50"></text></g><g><title>lli`lli::code::Code::curr (1 samples, 0.57%)</title><rect x="46.5517%" y="309" width="0.5747%" height="15" fill="rgb(249,83,47)" fg:x="81" fg:w="1"/><text x="46.8017%" y="319.50"></text></g><g><title>lli`lli::code::Code::at (1 samples, 0.57%)</title><rect x="46.5517%" y="293" width="0.5747%" height="15" fill="rgb(215,43,3)" fg:x="81" fg:w="1"/><text x="46.8017%" y="303.50"></text></g><g><title>lli`core::slice::raw::from_raw_parts (1 samples, 0.57%)</title><rect x="46.5517%" y="277" width="0.5747%" height="15" fill="rgb(238,154,13)" fg:x="81" fg:w="1"/><text x="46.8017%" y="287.50"></text></g><g><title>lli`__rust_probestack (1 samples, 0.57%)</title><rect x="47.7011%" y="165" width="0.5747%" height="15" fill="rgb(219,56,2)" fg:x="83" fg:w="1"/><text x="47.9511%" y="175.50"></text></g><g><title>lli`hashbrown::map::make_hash (4 samples, 2.30%)</title><rect x="47.1264%" y="213" width="2.2989%" height="15" fill="rgb(233,0,4)" fg:x="82" fg:w="4"/><text x="47.3764%" y="223.50">l..</text></g><g><title>lli`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 2.30%)</title><rect x="47.1264%" y="197" width="2.2989%" height="15" fill="rgb(235,30,7)" fg:x="82" fg:w="4"/><text x="47.3764%" y="207.50">l..</text></g><g><title>lli`&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (4 samples, 2.30%)</title><rect x="47.1264%" y="181" width="2.2989%" height="15" fill="rgb(250,79,13)" fg:x="82" fg:w="4"/><text x="47.3764%" y="191.50">l..</text></g><g><title>lli`core::slice::_&lt;impl [T]&gt;::split_at (2 samples, 1.15%)</title><rect x="48.2759%" y="165" width="1.1494%" height="15" fill="rgb(211,146,34)" fg:x="84" fg:w="2"/><text x="48.5259%" y="175.50"></text></g><g><title>lli`core::slice::_&lt;impl [T]&gt;::split_at_unchecked (2 samples, 1.15%)</title><rect x="48.2759%" y="149" width="1.1494%" height="15" fill="rgb(228,22,38)" fg:x="84" fg:w="2"/><text x="48.5259%" y="159.50"></text></g><g><title>lli`core::slice::_&lt;impl [T]&gt;::get_unchecked (1 samples, 0.57%)</title><rect x="48.8506%" y="133" width="0.5747%" height="15" fill="rgb(235,168,5)" fg:x="85" fg:w="1"/><text x="49.1006%" y="143.50"></text></g><g><title>lli`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.57%)</title><rect x="48.8506%" y="117" width="0.5747%" height="15" fill="rgb(221,155,16)" fg:x="85" fg:w="1"/><text x="49.1006%" y="127.50"></text></g><g><title>lli`hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 1.15%)</title><rect x="49.4253%" y="213" width="1.1494%" height="15" fill="rgb(215,215,53)" fg:x="86" fg:w="2"/><text x="49.6753%" y="223.50"></text></g><g><title>lli`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 1.15%)</title><rect x="49.4253%" y="197" width="1.1494%" height="15" fill="rgb(223,4,10)" fg:x="86" fg:w="2"/><text x="49.6753%" y="207.50"></text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 1.15%)</title><rect x="49.4253%" y="181" width="1.1494%" height="15" fill="rgb(234,103,6)" fg:x="86" fg:w="2"/><text x="49.6753%" y="191.50"></text></g><g><title>lli`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::offset (1 samples, 0.57%)</title><rect x="50.0000%" y="165" width="0.5747%" height="15" fill="rgb(227,97,0)" fg:x="87" fg:w="1"/><text x="50.2500%" y="175.50"></text></g><g><title>lli`&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="50.5747%" y="197" width="0.5747%" height="15" fill="rgb(234,150,53)" fg:x="88" fg:w="1"/><text x="50.8247%" y="207.50"></text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::bucket (1 samples, 0.57%)</title><rect x="50.5747%" y="181" width="0.5747%" height="15" fill="rgb(228,201,54)" fg:x="88" fg:w="1"/><text x="50.8247%" y="191.50"></text></g><g><title>lli`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.57%)</title><rect x="50.5747%" y="165" width="0.5747%" height="15" fill="rgb(222,22,37)" fg:x="88" fg:w="1"/><text x="50.8247%" y="175.50"></text></g><g><title>lli`core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.57%)</title><rect x="51.7241%" y="149" width="0.5747%" height="15" fill="rgb(237,53,32)" fg:x="90" fg:w="1"/><text x="51.9741%" y="159.50"></text></g><g><title>lli`&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (1 samples, 0.57%)</title><rect x="51.7241%" y="133" width="0.5747%" height="15" fill="rgb(233,25,53)" fg:x="90" fg:w="1"/><text x="51.9741%" y="143.50"></text></g><g><title>lli`lli::op::flow::jmp (10 samples, 5.75%)</title><rect x="47.1264%" y="309" width="5.7471%" height="15" fill="rgb(210,40,34)" fg:x="82" fg:w="10"/><text x="47.3764%" y="319.50">lli`lli..</text></g><g><title>lli`lli::mem::Mem::label_find (10 samples, 5.75%)</title><rect x="47.1264%" y="293" width="5.7471%" height="15" fill="rgb(241,220,44)" fg:x="82" fg:w="10"/><text x="47.3764%" y="303.50">lli`lli..</text></g><g><title>lli`ahash::hash_map::AHashMap&lt;K,V,S&gt;::get (10 samples, 5.75%)</title><rect x="47.1264%" y="277" width="5.7471%" height="15" fill="rgb(235,28,35)" fg:x="82" fg:w="10"/><text x="47.3764%" y="287.50">lli`aha..</text></g><g><title>lli`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 5.75%)</title><rect x="47.1264%" y="261" width="5.7471%" height="15" fill="rgb(210,56,17)" fg:x="82" fg:w="10"/><text x="47.3764%" y="271.50">lli`std..</text></g><g><title>lli`hashbrown::map::HashMap&lt;K,V,S&gt;::get (10 samples, 5.75%)</title><rect x="47.1264%" y="245" width="5.7471%" height="15" fill="rgb(224,130,29)" fg:x="82" fg:w="10"/><text x="47.3764%" y="255.50">lli`has..</text></g><g><title>lli`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (10 samples, 5.75%)</title><rect x="47.1264%" y="229" width="5.7471%" height="15" fill="rgb(235,212,8)" fg:x="82" fg:w="10"/><text x="47.3764%" y="239.50">lli`has..</text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::find (4 samples, 2.30%)</title><rect x="50.5747%" y="213" width="2.2989%" height="15" fill="rgb(223,33,50)" fg:x="88" fg:w="4"/><text x="50.8247%" y="223.50">l..</text></g><g><title>lli`hashbrown::raw::RawTable&lt;T&gt;::iter_hash (3 samples, 1.72%)</title><rect x="51.1494%" y="197" width="1.7241%" height="15" fill="rgb(219,149,13)" fg:x="89" fg:w="3"/><text x="51.3994%" y="207.50"></text></g><g><title>lli`hashbrown::raw::RawIterHash&lt;T&gt;::new (3 samples, 1.72%)</title><rect x="51.1494%" y="181" width="1.7241%" height="15" fill="rgb(250,156,29)" fg:x="89" fg:w="3"/><text x="51.3994%" y="191.50"></text></g><g><title>lli`hashbrown::raw::sse2::Group::match_byte (2 samples, 1.15%)</title><rect x="51.7241%" y="165" width="1.1494%" height="15" fill="rgb(216,193,19)" fg:x="90" fg:w="2"/><text x="51.9741%" y="175.50"></text></g><g><title>lli`core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.57%)</title><rect x="52.2989%" y="149" width="0.5747%" height="15" fill="rgb(216,135,14)" fg:x="91" fg:w="1"/><text x="52.5489%" y="159.50"></text></g><g><title>lli`core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.57%)</title><rect x="52.2989%" y="133" width="0.5747%" height="15" fill="rgb(241,47,5)" fg:x="91" fg:w="1"/><text x="52.5489%" y="143.50"></text></g><g><title>lli`core::core_arch::simd::i8x16::new (1 samples, 0.57%)</title><rect x="52.2989%" y="117" width="0.5747%" height="15" fill="rgb(233,42,35)" fg:x="91" fg:w="1"/><text x="52.5489%" y="127.50"></text></g><g><title>lli`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.57%)</title><rect x="54.5977%" y="133" width="0.5747%" height="15" fill="rgb(231,13,6)" fg:x="95" fg:w="1"/><text x="54.8477%" y="143.50"></text></g><g><title>lli`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 1.72%)</title><rect x="55.1724%" y="117" width="1.7241%" height="15" fill="rgb(207,181,40)" fg:x="96" fg:w="3"/><text x="55.4224%" y="127.50"></text></g><g><title>lli`alloc::alloc::Global::alloc_impl (3 samples, 1.72%)</title><rect x="55.1724%" y="101" width="1.7241%" height="15" fill="rgb(254,173,49)" fg:x="96" fg:w="3"/><text x="55.4224%" y="111.50"></text></g><g><title>lli`alloc::alloc::alloc (3 samples, 1.72%)</title><rect x="55.1724%" y="85" width="1.7241%" height="15" fill="rgb(221,1,38)" fg:x="96" fg:w="3"/><text x="55.4224%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 1.72%)</title><rect x="55.1724%" y="69" width="1.7241%" height="15" fill="rgb(206,124,46)" fg:x="96" fg:w="3"/><text x="55.4224%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 1.15%)</title><rect x="55.7471%" y="53" width="1.1494%" height="15" fill="rgb(249,21,11)" fg:x="97" fg:w="2"/><text x="55.9971%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 1.15%)</title><rect x="55.7471%" y="37" width="1.1494%" height="15" fill="rgb(222,201,40)" fg:x="97" fg:w="2"/><text x="55.9971%" y="47.50"></text></g><g><title>lli`core::alloc::layout::Layout::array (1 samples, 0.57%)</title><rect x="56.8966%" y="117" width="0.5747%" height="15" fill="rgb(235,61,29)" fg:x="99" fg:w="1"/><text x="57.1466%" y="127.50"></text></g><g><title>lli`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.57%)</title><rect x="57.4713%" y="117" width="0.5747%" height="15" fill="rgb(219,207,3)" fg:x="100" fg:w="1"/><text x="57.7213%" y="127.50"></text></g><g><title>lli`&lt;str as alloc::string::ToString&gt;::to_string (8 samples, 4.60%)</title><rect x="54.0230%" y="293" width="4.5977%" height="15" fill="rgb(222,56,46)" fg:x="94" fg:w="8"/><text x="54.2730%" y="303.50">lli`&lt;..</text></g><g><title>lli`&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (8 samples, 4.60%)</title><rect x="54.0230%" y="277" width="4.5977%" height="15" fill="rgb(239,76,54)" fg:x="94" fg:w="8"/><text x="54.2730%" y="287.50">lli`&lt;..</text></g><g><title>lli`alloc::str::_&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (8 samples, 4.60%)</title><rect x="54.0230%" y="261" width="4.5977%" height="15" fill="rgb(231,124,27)" fg:x="94" fg:w="8"/><text x="54.2730%" y="271.50">lli`a..</text></g><g><title>lli`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8 samples, 4.60%)</title><rect x="54.0230%" y="245" width="4.5977%" height="15" fill="rgb(249,195,6)" fg:x="94" fg:w="8"/><text x="54.2730%" y="255.50">lli`a..</text></g><g><title>lli`alloc::slice::_&lt;impl [T]&gt;::to_vec (8 samples, 4.60%)</title><rect x="54.0230%" y="229" width="4.5977%" height="15" fill="rgb(237,174,47)" fg:x="94" fg:w="8"/><text x="54.2730%" y="239.50">lli`a..</text></g><g><title>lli`alloc::slice::_&lt;impl [T]&gt;::to_vec_in (8 samples, 4.60%)</title><rect x="54.0230%" y="213" width="4.5977%" height="15" fill="rgb(206,201,31)" fg:x="94" fg:w="8"/><text x="54.2730%" y="223.50">lli`a..</text></g><g><title>lli`alloc::slice::hack::to_vec (8 samples, 4.60%)</title><rect x="54.0230%" y="197" width="4.5977%" height="15" fill="rgb(231,57,52)" fg:x="94" fg:w="8"/><text x="54.2730%" y="207.50">lli`a..</text></g><g><title>lli`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 4.60%)</title><rect x="54.0230%" y="181" width="4.5977%" height="15" fill="rgb(248,177,22)" fg:x="94" fg:w="8"/><text x="54.2730%" y="191.50">lli`&lt;..</text></g><g><title>lli`alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 4.60%)</title><rect x="54.0230%" y="165" width="4.5977%" height="15" fill="rgb(215,211,37)" fg:x="94" fg:w="8"/><text x="54.2730%" y="175.50">lli`a..</text></g><g><title>lli`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 4.60%)</title><rect x="54.0230%" y="149" width="4.5977%" height="15" fill="rgb(241,128,51)" fg:x="94" fg:w="8"/><text x="54.2730%" y="159.50">lli`a..</text></g><g><title>lli`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 3.45%)</title><rect x="55.1724%" y="133" width="3.4483%" height="15" fill="rgb(227,165,31)" fg:x="96" fg:w="6"/><text x="55.4224%" y="143.50">lli..</text></g><g><title>lli`core::ptr::unique::Unique&lt;T&gt;::new_unchecked (1 samples, 0.57%)</title><rect x="58.0460%" y="117" width="0.5747%" height="15" fill="rgb(228,167,24)" fg:x="101" fg:w="1"/><text x="58.2960%" y="127.50"></text></g><g><title>lli`lli::op::flow::lbl (11 samples, 6.32%)</title><rect x="52.8736%" y="309" width="6.3218%" height="15" fill="rgb(228,143,12)" fg:x="92" fg:w="11"/><text x="53.1236%" y="319.50">lli`lli:..</text></g><g><title>lli`lli::lex::Tok::get_sym (1 samples, 0.57%)</title><rect x="58.6207%" y="293" width="0.5747%" height="15" fill="rgb(249,149,8)" fg:x="102" fg:w="1"/><text x="58.8707%" y="303.50"></text></g><g><title>lli`core::intrinsics::copy_nonoverlapping (1 samples, 0.57%)</title><rect x="59.7701%" y="213" width="0.5747%" height="15" fill="rgb(243,35,44)" fg:x="104" fg:w="1"/><text x="60.0201%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="59.7701%" y="197" width="0.5747%" height="15" fill="rgb(246,89,9)" fg:x="104" fg:w="1"/><text x="60.0201%" y="207.50"></text></g><g><title>lli`core::mem::swap (2 samples, 1.15%)</title><rect x="59.7701%" y="245" width="1.1494%" height="15" fill="rgb(233,213,13)" fg:x="104" fg:w="2"/><text x="60.0201%" y="255.50"></text></g><g><title>lli`core::ptr::swap_nonoverlapping_one (2 samples, 1.15%)</title><rect x="59.7701%" y="229" width="1.1494%" height="15" fill="rgb(233,141,41)" fg:x="104" fg:w="2"/><text x="60.0201%" y="239.50"></text></g><g><title>lli`core::ptr::read (1 samples, 0.57%)</title><rect x="60.3448%" y="213" width="0.5747%" height="15" fill="rgb(239,167,4)" fg:x="105" fg:w="1"/><text x="60.5948%" y="223.50"></text></g><g><title>lli`core::intrinsics::copy_nonoverlapping (1 samples, 0.57%)</title><rect x="60.3448%" y="197" width="0.5747%" height="15" fill="rgb(209,217,16)" fg:x="105" fg:w="1"/><text x="60.5948%" y="207.50"></text></g><g><title>lli`lli::op::exec (70 samples, 40.23%)</title><rect x="21.2644%" y="325" width="40.2299%" height="15" fill="rgb(219,88,35)" fg:x="37" fg:w="70"/><text x="21.5144%" y="335.50">lli`lli::op::exec</text></g><g><title>lli`lli::op::math::add (4 samples, 2.30%)</title><rect x="59.1954%" y="309" width="2.2989%" height="15" fill="rgb(220,193,23)" fg:x="103" fg:w="4"/><text x="59.4454%" y="319.50">l..</text></g><g><title>lli`lli::op::math::parse_arg (3 samples, 1.72%)</title><rect x="59.7701%" y="293" width="1.7241%" height="15" fill="rgb(230,90,52)" fg:x="104" fg:w="3"/><text x="60.0201%" y="303.50"></text></g><g><title>lli`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 1.72%)</title><rect x="59.7701%" y="277" width="1.7241%" height="15" fill="rgb(252,106,19)" fg:x="104" fg:w="3"/><text x="60.0201%" y="287.50"></text></g><g><title>lli`core::mem::replace (3 samples, 1.72%)</title><rect x="59.7701%" y="261" width="1.7241%" height="15" fill="rgb(206,74,20)" fg:x="104" fg:w="3"/><text x="60.0201%" y="271.50"></text></g><g><title>lli`core::ptr::swap_nonoverlapping_one (1 samples, 0.57%)</title><rect x="60.9195%" y="245" width="0.5747%" height="15" fill="rgb(230,138,44)" fg:x="106" fg:w="1"/><text x="61.1695%" y="255.50"></text></g><g><title>lli`lli::op::flow::lbl (1 samples, 0.57%)</title><rect x="61.4943%" y="325" width="0.5747%" height="15" fill="rgb(235,182,43)" fg:x="107" fg:w="1"/><text x="61.7443%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 1.15%)</title><rect x="62.6437%" y="309" width="1.1494%" height="15" fill="rgb(242,16,51)" fg:x="109" fg:w="2"/><text x="62.8937%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 1.15%)</title><rect x="63.7931%" y="309" width="1.1494%" height="15" fill="rgb(248,9,4)" fg:x="111" fg:w="2"/><text x="64.0431%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.57%)</title><rect x="64.9425%" y="293" width="0.5747%" height="15" fill="rgb(210,31,22)" fg:x="113" fg:w="1"/><text x="65.1925%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.57%)</title><rect x="65.5172%" y="293" width="0.5747%" height="15" fill="rgb(239,54,39)" fg:x="114" fg:w="1"/><text x="65.7672%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`write (42 samples, 24.14%)</title><rect x="66.6667%" y="245" width="24.1379%" height="15" fill="rgb(230,99,41)" fg:x="116" fg:w="42"/><text x="66.9167%" y="255.50">libsystem_kernel.dylib`write</text></g><g><title>lli`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (45 samples, 25.86%)</title><rect x="66.6667%" y="261" width="25.8621%" height="15" fill="rgb(253,106,12)" fg:x="116" fg:w="45"/><text x="66.9167%" y="271.50">lli`&lt;std::io::stdio::StdoutLock as std::i..</text></g><g><title>lli`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 1.72%)</title><rect x="90.8046%" y="245" width="1.7241%" height="15" fill="rgb(213,46,41)" fg:x="158" fg:w="3"/><text x="91.0546%" y="255.50"></text></g><g><title>lli`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (46 samples, 26.44%)</title><rect x="66.6667%" y="277" width="26.4368%" height="15" fill="rgb(215,133,35)" fg:x="116" fg:w="46"/><text x="66.9167%" y="287.50">lli`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt;..</text></g><g><title>lli`core::slice::memchr::memrchr (1 samples, 0.57%)</title><rect x="92.5287%" y="261" width="0.5747%" height="15" fill="rgb(213,28,5)" fg:x="161" fg:w="1"/><text x="92.7787%" y="271.50"></text></g><g><title>lli`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.57%)</title><rect x="93.1034%" y="277" width="0.5747%" height="15" fill="rgb(215,77,49)" fg:x="162" fg:w="1"/><text x="93.3534%" y="287.50"></text></g><g><title>lli`core::fmt::Formatter::pad_formatted_parts (1 samples, 0.57%)</title><rect x="94.8276%" y="261" width="0.5747%" height="15" fill="rgb(248,100,22)" fg:x="165" fg:w="1"/><text x="95.0776%" y="271.50"></text></g><g><title>lli`core::fmt::Formatter::write_formatted_parts (2 samples, 1.15%)</title><rect x="95.4023%" y="261" width="1.1494%" height="15" fill="rgb(208,67,9)" fg:x="166" fg:w="2"/><text x="95.6523%" y="271.50"></text></g><g><title>lli`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.57%)</title><rect x="95.9770%" y="245" width="0.5747%" height="15" fill="rgb(219,133,21)" fg:x="167" fg:w="1"/><text x="96.2270%" y="255.50"></text></g><g><title>lli`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.57%)</title><rect x="95.9770%" y="229" width="0.5747%" height="15" fill="rgb(246,46,29)" fg:x="167" fg:w="1"/><text x="96.2270%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="95.9770%" y="213" width="0.5747%" height="15" fill="rgb(246,185,52)" fg:x="167" fg:w="1"/><text x="96.2270%" y="223.50"></text></g><g><title>lli`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (58 samples, 33.33%)</title><rect x="64.9425%" y="309" width="33.3333%" height="15" fill="rgb(252,136,11)" fg:x="113" fg:w="58"/><text x="65.1925%" y="319.50">lli`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write..</text></g><g><title>lli`core::fmt::write (56 samples, 32.18%)</title><rect x="66.0920%" y="293" width="32.1839%" height="15" fill="rgb(219,138,53)" fg:x="115" fg:w="56"/><text x="66.3420%" y="303.50">lli`core::fmt::write</text></g><g><title>lli`core::fmt::float::float_to_decimal_common_shortest (8 samples, 4.60%)</title><rect x="93.6782%" y="277" width="4.5977%" height="15" fill="rgb(211,51,23)" fg:x="163" fg:w="8"/><text x="93.9282%" y="287.50">lli`c..</text></g><g><title>lli`core::num::flt2dec::strategy::grisu::format_shortest_opt (3 samples, 1.72%)</title><rect x="96.5517%" y="261" width="1.7241%" height="15" fill="rgb(247,221,28)" fg:x="168" fg:w="3"/><text x="96.8017%" y="271.50"></text></g><g><title>lli`lli::main (171 samples, 98.28%)</title><rect x="0.5747%" y="341" width="98.2759%" height="15" fill="rgb(251,222,45)" fg:x="1" fg:w="171"/><text x="0.8247%" y="351.50">lli`lli::main</text></g><g><title>lli`std::io::stdio::_print (64 samples, 36.78%)</title><rect x="62.0690%" y="325" width="36.7816%" height="15" fill="rgb(217,162,53)" fg:x="108" fg:w="64"/><text x="62.3190%" y="335.50">lli`std::io::stdio::_print</text></g><g><title>lli`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.57%)</title><rect x="98.2759%" y="309" width="0.5747%" height="15" fill="rgb(229,93,14)" fg:x="171" fg:w="1"/><text x="98.5259%" y="319.50"></text></g><g><title>lli`lli::mem::Mem::mem_at (1 samples, 0.57%)</title><rect x="98.8506%" y="341" width="0.5747%" height="15" fill="rgb(209,67,49)" fg:x="172" fg:w="1"/><text x="99.1006%" y="351.50"></text></g><g><title>all (174 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="174"/><text x="0.2500%" y="495.50"></text></g><g><title>0x2 (174 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="174"/><text x="0.2500%" y="479.50">0x2</text></g><g><title>libdyld.dylib`start (174 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="174"/><text x="0.2500%" y="463.50">libdyld.dylib`start</text></g><g><title>lli`main (173 samples, 99.43%)</title><rect x="0.5747%" y="437" width="99.4253%" height="15" fill="rgb(221,220,41)" fg:x="1" fg:w="173"/><text x="0.8247%" y="447.50">lli`main</text></g><g><title>lli`std::rt::lang_start (173 samples, 99.43%)</title><rect x="0.5747%" y="421" width="99.4253%" height="15" fill="rgb(218,133,21)" fg:x="1" fg:w="173"/><text x="0.8247%" y="431.50">lli`std::rt::lang_start</text></g><g><title>lli`std::rt::lang_start_internal (173 samples, 99.43%)</title><rect x="0.5747%" y="405" width="99.4253%" height="15" fill="rgb(221,193,43)" fg:x="1" fg:w="173"/><text x="0.8247%" y="415.50">lli`std::rt::lang_start_internal</text></g><g><title>lli`std::rt::lang_start::_{{closure}} (173 samples, 99.43%)</title><rect x="0.5747%" y="389" width="99.4253%" height="15" fill="rgb(240,128,52)" fg:x="1" fg:w="173"/><text x="0.8247%" y="399.50">lli`std::rt::lang_start::_{{closure}}</text></g><g><title>lli`std::sys_common::backtrace::__rust_begin_short_backtrace (173 samples, 99.43%)</title><rect x="0.5747%" y="373" width="99.4253%" height="15" fill="rgb(253,114,12)" fg:x="1" fg:w="173"/><text x="0.8247%" y="383.50">lli`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lli`core::ops::function::FnOnce::call_once (173 samples, 99.43%)</title><rect x="0.5747%" y="357" width="99.4253%" height="15" fill="rgb(215,223,47)" fg:x="1" fg:w="173"/><text x="0.8247%" y="367.50">lli`core::ops::function::FnOnce::call_once</text></g><g><title>lli`std::io::stdio::_print (1 samples, 0.57%)</title><rect x="99.4253%" y="341" width="0.5747%" height="15" fill="rgb(248,225,23)" fg:x="173" fg:w="1"/><text x="99.6753%" y="351.50"></text></g></svg></svg>